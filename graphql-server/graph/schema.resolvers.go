package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/alimikegami/go-monorepo/graphql-server/entity"
	"github.com/alimikegami/go-monorepo/graphql-server/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := &entity.User{
		Name: input.Name,
	}
	res := r.Db.WithContext(ctx).Create(user)

	if res.Error != nil {
		return nil, res.Error
	}
	return &model.User{
		ID:   fmt.Sprintf("%d", user.ID),
		Name: user.Name,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var data []entity.User
	err := r.Db.Find(&data).Error
	if err != nil {
		return nil, err
	}

	var resp []*model.User

	for _, user := range data {
		resp = append(resp, &model.User{
			ID:   fmt.Sprintf("%d", user.ID),
			Name: user.Name,
		})
	}

	return resp, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
